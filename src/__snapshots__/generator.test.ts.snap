// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate example.mgsdl 1`] = `
"import { Types, Document } from 'mongoose';

export enum UserStatus {
  Pending = 'Pending',
  Active = 'Active',
  Inactive = 'Inactive',
}

export interface UserDocument extends Document {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  email: string;
  name: string | null | undefined;
  status: UserStatus;
}

export interface ProjectDocument extends Document {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  creator: Types.ObjectId;
  details: ProjectDetailsSchemaDocument;
  lastAccessedByUserId: Map<string, string | null>;
  readonly detailsByUserId: Map<string, ProjectDetailsSchemaDocument> | null | undefined;
}

export interface ProjectDetailsSchemaDocument extends Document {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  name: string;
  alternateNames: string[];
  number: number | null | undefined;
  readonly isActive: boolean;
  startDate: Date | null | undefined;
}

import { Schema, model } from 'mongoose';

const ProjectDetailsSchema = new Schema<ProjectDetailsSchemaDocument>(
  {
    name: { required: true, type: String },
    alternateNames: { required: true, type: [{ type: String, required: true }] },
    number: { unique: true, type: Number },
    isActive: { required: true, immutable: true, type: Boolean },
    startDate: { type: Date },
  },
  { timestamps: true }
);

const UserSchema = new Schema<UserDocument>(
  {
    email: { required: true, index: true, unique: true, type: String },
    name: { type: String },
    status: { required: true, type: String, enum: UserStatus },
  },
  { timestamps: true }
);

export const UserModel = model<UserDocument>('User', UserSchema);

const ProjectSchema = new Schema<ProjectDocument>(
  {
    creator: { required: true, index: true, type: Schema.Types.ObjectId, ref: 'User' },
    details: { required: true, type: ProjectDetailsSchema },
    lastAccessedByUserId: { required: true, type: Map, of: { type: String } },
    detailsByUserId: { immutable: true, type: Map, of: { type: ProjectDetailsSchema, required: true } },
  },
  { timestamps: true }
);

export const ProjectModel = model<ProjectDocument>('Project', ProjectSchema);"
`;

exports[`generate topological-ordering.mgsdl 1`] = `
"import { Types, Document } from 'mongoose';

export interface ProjectDocument extends Document {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  name: string;
  details: ProjectDetailsSchemaDocument;
}

export interface CompanySchemaDocument extends Document {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  name: string | null | undefined;
}

export interface ContractorSchemaDocument extends Document {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  name: string;
  company: CompanySchemaDocument | null | undefined;
  parentContractor: ContractorSchemaDocument;
}

export interface ProjectDetailsSchemaDocument extends Document {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  name: string;
  contractor: ContractorSchemaDocument;
}

import { Schema, model } from 'mongoose';

const CompanySchema = new Schema<CompanySchemaDocument>(
  {
    name: { type: String },
  },
  { timestamps: true }
);

const ContractorSchema = new Schema<ContractorSchemaDocument>(
  {
    name: { required: true, type: String },
    company: { type: CompanySchema },
  },
  { timestamps: true }
);
ContractorSchema.add({ parentContractor: { required: true, type: ContractorSchema } });

const ProjectDetailsSchema = new Schema<ProjectDetailsSchemaDocument>(
  {
    name: { required: true, type: String },
    contractor: { required: true, type: ContractorSchema },
  },
  { timestamps: true }
);

const ProjectSchema = new Schema<ProjectDocument>(
  {
    name: { required: true, type: String },
    details: { required: true, type: ProjectDetailsSchema },
  },
  { timestamps: true }
);

export const ProjectModel = model<ProjectDocument>('Project', ProjectSchema);"
`;
