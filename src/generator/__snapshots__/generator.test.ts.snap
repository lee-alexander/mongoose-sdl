// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate example.mgsdl 1`] = `
"import { Types, Document, Schema, model } from 'mongoose';
import { UserDetailsInterface } from '../externals';

export enum UserStatus {
  Pending = 'Pending',
  Active = 'Active',
  Inactive = 'Inactive',
}

export interface UserDocument extends Document {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  email: string;
  name: string | null | undefined;
  status: UserStatus;
  unknownRef: Types.ObjectId;
  fullName: string;
  computedFields: UserDetailsInterface;
}

export interface ProjectDocument extends Document {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  creator: Types.ObjectId;
  details: ProjectDetailsSchemaDocument;
  lastAccessedByUserId: Map<string, string | null>;
  readonly detailsByUserId: Map<string, ProjectDetailsSchemaDocument> | null | undefined;
}

export interface ProjectDetailsSchemaDocument extends Document {
  id: string;
  name: string;
  alternateNames: string[];
  number: number | null | undefined;
  readonly isActive: boolean;
  startDate: Date | null | undefined;
  dynamicRef: Types.ObjectId;
}

export interface MongooseFactoryConfig {
  schemas: {
    User: {
      status: {
        validate: {
          validator: (val: UserStatus) => any,
          message?: string,
        },
      },
      fullName: {
        virtual: {
          get?: (doc: UserSchema) => string
          set?: (doc: UserSchema, value: string) => void
        },
      },
      computedFields: {
        virtual: {
          get?: (doc: UserSchema) => UserDetailsInterface
          set?: (doc: UserSchema, value: UserDetailsInterface) => void
        },
      },
    },
    Project?: {
    },
    ProjectDetails: {
      startDate: {
        validate: {
          validator: (val: Date | null | undefined) => any,
          message?: string,
        },
      },
      dynamicRef: {
        ref: (doc: ProjectDetailsSchema) => 'User' | 'Project',
      },
    }
  }
}

export function initializeMongoose(config: MongooseFactoryConfig) {
  
  const ProjectDetailsSchema = new Schema(
    {
      name: { required: true, type: String },
      alternateNames: { required: true, type: [{ type: String, required: true }] },
      number: { unique: true, type: Number },
      isActive: { required: true, immutable: true, type: Boolean },
      startDate: { type: Date, validate: config.schemas.ProjectDetails.startDate.validate },
      dynamicRef: { required: true, type: Schema.Types.ObjectId, ref: function() { return config.schemas.ProjectDetails.dynamicRef.ref(this); } },
    }
  );
  
  const UserSchema = new Schema(
    {
      email: { required: true, index: true, unique: true, type: String },
      name: { type: String },
      status: { required: true, type: String, enum: UserStatus, validate: config.schemas.User.status.validate },
      unknownRef: { required: true, type: Schema.Types.ObjectId },
    },
    { timestamps: true }
  );
  if (config.schemas.User.fullName.virtual.get) {
    UserSchema.virtual('fullName').get((_, __, doc) => config.schemas.User.virtual.get(doc))
  }
  if (config.schemas.User.fullName.virtual.set) {
    UserSchema.virtual('fullName').set((value, _, doc) => { config.schemas.User.virtual.set(doc, value); })
  }
  if (config.schemas.User.computedFields.virtual.get) {
    UserSchema.virtual('computedFields').get((_, __, doc) => config.schemas.User.virtual.get(doc))
  }
  if (config.schemas.User.computedFields.virtual.set) {
    UserSchema.virtual('computedFields').set((value, _, doc) => { config.schemas.User.virtual.set(doc, value); })
  }
  
  const UserModel = model<UserDocument>('User', UserSchema);
  
  const ProjectSchema = new Schema(
    {
      creator: { required: true, index: true, type: Schema.Types.ObjectId, ref: 'User' },
      details: { required: true, type: ProjectDetailsSchema },
      lastAccessedByUserId: { required: true, type: Map, of: { type: String } },
      detailsByUserId: { immutable: true, type: Map, of: { type: ProjectDetailsSchema, required: true } },
    },
    { timestamps: true }
  );
  
  const ProjectModel = model<ProjectDocument>('Project', ProjectSchema);
  
  return {
    schemas: { UserSchema, ProjectSchema, ProjectDetailsSchema },
    models: { UserModel, ProjectModel }
  };
  
}"
`;

exports[`generate topological-ordering.mgsdl 1`] = `
"import { Types, Document, Schema, model } from 'mongoose';

export interface ProjectDocument extends Document {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  name: string;
  details: ProjectDetailsSchemaDocument;
}

export interface CompanySchemaDocument extends Document {
  id: string;
  name: string | null | undefined;
}

export interface ContractorSchemaDocument extends Document {
  id: string;
  name: string;
  company: CompanySchemaDocument | null | undefined;
  parentContractor: ContractorSchemaDocument;
}

export interface ProjectDetailsSchemaDocument extends Document {
  id: string;
  name: string;
  contractor: ContractorSchemaDocument;
}

export interface MongooseFactoryConfig {
  schemas: {
    Project?: {
    },
    Company?: {
    },
    Contractor?: {
    },
    ProjectDetails?: {
    }
  }
}

export function initializeMongoose(config: MongooseFactoryConfig) {
  
  const CompanySchema = new Schema(
    {
      name: { type: String },
    }
  );
  
  const ContractorSchema = new Schema(
    {
      name: { required: true, type: String },
      company: { type: CompanySchema },
    }
  );
  ContractorSchema.add({ parentContractor: { required: true, type: ContractorSchema } });
  
  const ProjectDetailsSchema = new Schema(
    {
      name: { required: true, type: String },
      contractor: { required: true, type: ContractorSchema },
    }
  );
  
  const ProjectSchema = new Schema(
    {
      name: { required: true, type: String },
      details: { required: true, type: ProjectDetailsSchema },
    },
    { timestamps: true }
  );
  
  const ProjectModel = model<ProjectDocument>('Project', ProjectSchema);
  
  return {
    schemas: { ProjectSchema, CompanySchema, ContractorSchema, ProjectDetailsSchema },
    models: { ProjectModel }
  };
  
}"
`;
